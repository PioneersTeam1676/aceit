{"version":3,"file":"js/custom/account/settings/signin-methods.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,gDAAgD;AAChD,qBAAqB;AACrB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB,2BAA2B;AAC3B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,gDAAgD;AAChD,qBAAqB;AACrB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC","sources":["webpack://team1676-apps/./frontend/js/custom/account/settings/signin-methods.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTAccountSettingsSigninMethods = function () {\n    // Private functions\n    var initSettings = function () {\n        // UI elements\n        var signInMainEl = document.getElementById('kt_signin_email');\n\n        if (!signInMainEl) {\n            return;\n        }\n\n        var signInEditEl = document.getElementById('kt_signin_email_edit');\n        var passwordMainEl = document.getElementById('kt_signin_password');\n        var passwordEditEl = document.getElementById('kt_signin_password_edit');\n\n        // button elements\n        var signInChangeEmail = document.getElementById('kt_signin_email_button');\n        var signInCancelEmail = document.getElementById('kt_signin_cancel');\n        var passwordChange = document.getElementById('kt_signin_password_button');\n        var passwordCancel = document.getElementById('kt_password_cancel');\n\n        // toggle UI\n        signInChangeEmail.querySelector('button').addEventListener('click', function () {\n            toggleChangeEmail();\n        });\n\n        signInCancelEmail.addEventListener('click', function () {\n            toggleChangeEmail();\n        });\n\n        passwordChange.querySelector('button').addEventListener('click', function () {\n            toggleChangePassword();\n        });\n\n        passwordCancel.addEventListener('click', function () {\n            toggleChangePassword();\n        });\n\n        var toggleChangeEmail = function () {\n            signInMainEl.classList.toggle('d-none');\n            signInChangeEmail.classList.toggle('d-none');\n            signInEditEl.classList.toggle('d-none');\n        }\n\n        var toggleChangePassword = function () {\n            passwordMainEl.classList.toggle('d-none');\n            passwordChange.classList.toggle('d-none');\n            passwordEditEl.classList.toggle('d-none');\n        }\n    }\n\n    var handleChangeEmail = function (e) {\n        var validation;\n\n        // form elements\n        var signInForm = document.getElementById('kt_signin_change_email');\n\n        if (!signInForm) {\n            return;\n        }\n\n        validation = FormValidation.formValidation(\n            signInForm,\n            {\n                fields: {\n                    emailaddress: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Email is required'\n                            },\n                            emailAddress: {\n                                message: 'The value is not a valid email address'\n                            }\n                        }\n                    },\n\n                    confirmemailpassword: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Password is required'\n                            }\n                        }\n                    }\n                },\n\n                plugins: { //Learn more: https://formvalidation.io/guide/plugins\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row'\n                    })\n                }\n            }\n        );\n\n        signInForm.querySelector('#kt_signin_submit').addEventListener('click', function (e) {\n            e.preventDefault();\n            console.log('click');\n\n            validation.validate().then(function (status) {\n                if (status == 'Valid') {\n                    swal.fire({\n                        text: \"Sent password reset. Please check your email\",\n                        icon: \"success\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn font-weight-bold btn-light-primary\"\n                        }\n                    }).then(function(){\n                        signInForm.reset();\n                        validation.resetForm(); // Reset formvalidation --- more info: https://formvalidation.io/guide/api/reset-form/\n                    });\n                } else {\n                    swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn font-weight-bold btn-light-primary\"\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    var handleChangePassword = function (e) {\n        var validation;\n\n        // form elements\n        var passwordForm = document.getElementById('kt_signin_change_password');\n\n        if (!passwordForm) {\n            return;\n        }\n\n        validation = FormValidation.formValidation(\n            passwordForm,\n            {\n                fields: {\n                    currentpassword: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Current Password is required'\n                            }\n                        }\n                    },\n\n                    newpassword: {\n                        validators: {\n                            notEmpty: {\n                                message: 'New Password is required'\n                            }\n                        }\n                    },\n\n                    confirmpassword: {\n                        validators: {\n                            notEmpty: {\n                                message: 'Confirm Password is required'\n                            },\n                            identical: {\n                                compare: function() {\n                                    return passwordForm.querySelector('[name=\"newpassword\"]').value;\n                                },\n                                message: 'The password and its confirm are not the same'\n                            }\n                        }\n                    },\n                },\n\n                plugins: { //Learn more: https://formvalidation.io/guide/plugins\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row'\n                    })\n                }\n            }\n        );\n\n        passwordForm.querySelector('#kt_password_submit').addEventListener('click', function (e) {\n            e.preventDefault();\n            console.log('click');\n\n            validation.validate().then(function (status) {\n                if (status == 'Valid') {\n                    swal.fire({\n                        text: \"Sent password reset. Please check your email\",\n                        icon: \"success\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn font-weight-bold btn-light-primary\"\n                        }\n                    }).then(function(){\n                        passwordForm.reset();\n                        validation.resetForm(); // Reset formvalidation --- more info: https://formvalidation.io/guide/api/reset-form/\n                    });\n                } else {\n                    swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn font-weight-bold btn-light-primary\"\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    // Public methods\n    return {\n        init: function () {\n            initSettings();\n            handleChangeEmail();\n            handleChangePassword();\n        }\n    }\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function() {\n    KTAccountSettingsSigninMethods.init();\n});\n"],"names":[],"sourceRoot":""}