{"version":3,"file":"js/custom/utilities/modals/top-up-wallet.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,mEAAmE;;AAEnE;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,KAAK;AACL,KAAK;AACL;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,kCAAkC;AAClC,kCAAkC;AAClC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC","sources":["webpack://team1676-apps/./app/views/js/custom/utilities/modals/top-up-wallet.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTModalTopUpWallet = function () {\n\t// Elements\n\tvar modal;\n\tvar modalEl;\n\n\tvar stepper;\n\tvar form;\n\tvar formSubmitButton;\n\tvar formContinueButton;\n\n\t// Variables\n\tvar stepperObj;\n\tvar validations = [];\n\n\t// Private Functions\n\tvar initStepper = function () {\n\t\t// Initialize Stepper\n\t\tstepperObj = new KTStepper(stepper);\n\n\t\t// Stepper change event(handle hiding submit button for the last step)\n\t\tstepperObj.on('kt.stepper.changed', function (stepper) {\n\t\t\tif (stepperObj.getCurrentStepIndex() === 4) {\n\t\t\t\tformSubmitButton.classList.remove('d-none');\n\t\t\t\tformSubmitButton.classList.add('d-inline-block');\n\t\t\t\tformContinueButton.classList.add('d-none');\n\t\t\t} else if (stepperObj.getCurrentStepIndex() === 5) {\n\t\t\t\tformSubmitButton.classList.add('d-none');\n\t\t\t\tformContinueButton.classList.add('d-none');\n\t\t\t} else {\n\t\t\t\tformSubmitButton.classList.remove('d-inline-block');\n\t\t\t\tformSubmitButton.classList.remove('d-none');\n\t\t\t\tformContinueButton.classList.remove('d-none');\n\t\t\t}\n\t\t});\n\n\t\t// Validation before going to next page\n\t\tstepperObj.on('kt.stepper.next', function (stepper) {\n\t\t\tconsole.log('stepper.next');\n\n\t\t\t// Validate form before change stepper step\n\t\t\tvar validator = validations[stepper.getCurrentStepIndex() - 1]; // get validator for currnt step\n\n\t\t\tif (validator) {\n\t\t\t\tvalidator.validate().then(function (status) {\n\t\t\t\t\tconsole.log('validated!');\n\n\t\t\t\t\tif (status == 'Valid') {\n\t\t\t\t\t\tstepper.goNext();\n\n\t\t\t\t\t\t//KTUtil.scrollTop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Show error message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\t\t\t\t\t\tSwal.fire({\n\t\t\t\t\t\t\ttext: \"Sorry, looks like there are some errors detected, please try again.\",\n\t\t\t\t\t\t\ticon: \"error\",\n\t\t\t\t\t\t\tbuttonsStyling: false,\n\t\t\t\t\t\t\tconfirmButtonText: \"Ok, got it!\",\n\t\t\t\t\t\t\tcustomClass: {\n\t\t\t\t\t\t\t\tconfirmButton: \"btn btn-light\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).then(function () {\n\t\t\t\t\t\t\t//KTUtil.scrollTop();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tstepper.goNext();\n\n\t\t\t\tKTUtil.scrollTop();\n\t\t\t}\n\t\t});\n\n\t\t// Prev event\n\t\tstepperObj.on('kt.stepper.previous', function (stepper) {\n\t\t\tconsole.log('stepper.previous');\n\n\t\t\tstepper.goPrevious();\n\t\t\tKTUtil.scrollTop();\n\t\t});\n\n\t\tformSubmitButton.addEventListener('click', function (e) {\n\t\t\t// Prevent default button action\n\t\t\te.preventDefault();\n\n\t\t\t// Disable button to avoid multiple click \n\t\t\tformSubmitButton.disabled = true;\n\n\t\t\t// Show loading indication\n\t\t\tformSubmitButton.setAttribute('data-kt-indicator', 'on');\n\n\t\t\t// Simulate form submission\n\t\t\tsetTimeout(function () {\n\t\t\t\t// Hide loading indication\n\t\t\t\tformSubmitButton.removeAttribute('data-kt-indicator');\n\n\t\t\t\t// Enable button\n\t\t\t\tformSubmitButton.disabled = false;\n\n\t\t\t\tstepperObj.goNext();\n\t\t\t\t//KTUtil.scrollTop();\n\t\t\t}, 2000);\n\t\t});\n\t}\n\n\t// Init form inputs\n\tvar initForm = function () {\t\n        // Handle currency swap logic\n        const currencyTypes = form.querySelectorAll('[name=\"currency_type\"]');\n        const targets = form.querySelectorAll('[data-kt-modal-top-up-wallet-option]');\n        let value = \"dollar\";\n        currencyTypes.forEach(currency => {\n            currency.addEventListener('change', e => {\n                value = e.target.value;\n\n                targets.forEach(target => {\n                    target.classList.add('d-none');\n\n                    if(target.getAttribute('data-kt-modal-top-up-wallet-option') === value){\n                        target.classList.remove('d-none');\n                    }\n                });\n            });\n        });\n\n\t\t// Handle top up wallet button\n\t\tconst restartButton = document.querySelector('#kt_modal_top_up_wallet_create_new');\n\t\trestartButton.addEventListener('click', function () {\n\t\t\tform.reset();\n\t\t\tstepperObj.goTo(1);\n\t\t});\n\t}\n\n\t// Init validation\n\tvar initValidation = function () {\n\t\t// Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\t\t// Step 1\n\t\tvalidations.push(FormValidation.formValidation(\n\t\t\tform,\n\t\t\t{\n\t\t\t\tfields: {\n\t\t\t\t\ttop_up_amount: {\n\t\t\t\t\t\tvalidators: {\n\t\t\t\t\t\t\tnotEmpty: {\n\t\t\t\t\t\t\t\tmessage: 'Top up amount is required'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplugins: {\n\t\t\t\t\ttrigger: new FormValidation.plugins.Trigger(),\n\t\t\t\t\tbootstrap: new FormValidation.plugins.Bootstrap5({\n\t\t\t\t\t\trowSelector: '.fv-row',\n\t\t\t\t\t\teleInvalidClass: '',\n\t\t\t\t\t\teleValidClass: ''\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n        // Step 2\n\t\tvalidations.push(FormValidation.formValidation(\n\t\t\tform,\n\t\t\t{\n\t\t\t\tfields: {\n\t\t\t\t\tpayment_methods: {\n\t\t\t\t\t\tvalidators: {\n\t\t\t\t\t\t\tnotEmpty: {\n\t\t\t\t\t\t\t\tmessage: 'Payment method is required'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplugins: {\n\t\t\t\t\ttrigger: new FormValidation.plugins.Trigger(),\n\t\t\t\t\tbootstrap: new FormValidation.plugins.Bootstrap5({\n\t\t\t\t\t\trowSelector: '.fv-row',\n\t\t\t\t\t\teleInvalidClass: '',\n\t\t\t\t\t\teleValidClass: ''\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n        // Step 3\n\t\tvalidations.push(FormValidation.formValidation(\n\t\t\tform,\n\t\t\t{\n\t\t\t\tfields: {\n\t\t\t\t\ttop_up_password: {\n\t\t\t\t\t\tvalidators: {\n\t\t\t\t\t\t\tnotEmpty: {\n\t\t\t\t\t\t\t\tmessage: 'Password is required'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplugins: {\n\t\t\t\t\ttrigger: new FormValidation.plugins.Trigger(),\n\t\t\t\t\tbootstrap: new FormValidation.plugins.Bootstrap5({\n\t\t\t\t\t\trowSelector: '.fv-row',\n\t\t\t\t\t\teleInvalidClass: '',\n\t\t\t\t\t\teleValidClass: ''\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\t}\n\n\t// Handle cancel modal\n    const handleCancelAction = () => {\n        const closeButton = modalEl.querySelector('[data-kt-modal-action-type=\"close\"]');\n        closeButton.addEventListener('click', e => {\n            cancelAction(e);\n        });\n\n        const cancelAction = (e) => {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n\treturn {\n\t\t// Public Functions\n\t\tinit: function () {\n\t\t\t// Elements\n\t\t\tmodalEl = document.querySelector('#kt_modal_top_up_wallet');\n\n\t\t\tif (!modalEl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodal = new bootstrap.Modal(modalEl);\n\n\t\t\tstepper = document.querySelector('#kt_modal_top_up_wallet_stepper');\n\t\t\tform = document.querySelector('#kt_modal_top_up_wallet_stepper_form');\n\t\t\tformSubmitButton = stepper.querySelector('[data-kt-stepper-action=\"submit\"]');\n\t\t\tformContinueButton = stepper.querySelector('[data-kt-stepper-action=\"next\"]');\n\n\t\t\tinitStepper();\n\t\t\tinitForm();\n\t\t\tinitValidation();\n\t\t\thandleCancelAction();\n\t\t}\n\t};\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n\tKTModalTopUpWallet.init();\n});\n"],"names":[],"sourceRoot":""}