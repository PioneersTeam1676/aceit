{"version":3,"file":"js/custom/apps/ecommerce/settings/settings.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC,iDAAiD;AACjD,6BAA6B;AAC7B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC","sources":["webpack://team1676-apps/./frontend/js/custom/apps/ecommerce/settings/settings.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTAppEcommerceSettings = function () {\n    // Shared variables\n\n\n    // Private functions\n    const initForms = () => {\n        const forms = [\n            'kt_ecommerce_settings_general_form',\n            'kt_ecommerce_settings_general_store',\n            'kt_ecommerce_settings_general_localization',\n            'kt_ecommerce_settings_general_products',\n            'kt_ecommerce_settings_general_customers',\n        ];\n\n        // Init all forms\n        forms.forEach(formId => {\n            // Select form\n            const form = document.getElementById(formId);\n\n            if(!form){\n                return;\n            }\n\n            // Dynamically create validation non-empty rule\n            const requiredFields = form.querySelectorAll('.required');\n            var detectedField;\n            var validationFields = {\n                fields: {},\n\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n\n            // Detect required fields\n            requiredFields.forEach(el => {\n                const input = el.closest('.row').querySelector('input');\n                if (input) {\n                    detectedField = input;\n                }\n\n                const textarea = el.closest('.row').querySelector('textarea');\n                if (textarea) {\n                    detectedField = textarea;\n                }\n\n                const select = el.closest('.row').querySelector('select');\n                if (select) {\n                    detectedField = select;\n                }\n\n                // Add validation rule                \n                const name = detectedField.getAttribute('name');\n                validationFields.fields[name] = {\n                    validators: {\n                        notEmpty: {\n                            message: el.innerText + ' is required'\n                        }\n                    }\n                }\n            });\n\n            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n            var validator = FormValidation.formValidation(\n                form,\n                validationFields\n            );\n\n            // Submit button handler\n            const submitButton = form.querySelector('[data-kt-ecommerce-settings-type=\"submit\"]');\n            submitButton.addEventListener('click', function (e) {\n                // Prevent default button action\n                e.preventDefault();\n\n                // Validate form before submit\n                if (validator) {\n                    validator.validate().then(function (status) {\n                        console.log('validated!');\n\n                        if (status == 'Valid') {\n                            // Show loading indication\n                            submitButton.setAttribute('data-kt-indicator', 'on');\n\n                            // Disable button to avoid multiple click \n                            submitButton.disabled = true;\n\n                            // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                            setTimeout(function () {\n                                // Remove loading indication\n                                submitButton.removeAttribute('data-kt-indicator');\n\n                                // Enable button\n                                submitButton.disabled = false;\n\n                                // Show popup confirmation \n                                Swal.fire({\n                                    text: \"Form has been successfully submitted!\",\n                                    icon: \"success\",\n                                    buttonsStyling: false,\n                                    confirmButtonText: \"Ok, got it!\",\n                                    customClass: {\n                                        confirmButton: \"btn btn-primary\"\n                                    }\n                                });\n\n                                //form.submit(); // Submit form\n                            }, 2000);\n                        } else {\n                            // Show popup error \n                            Swal.fire({\n                                text: \"Oops! There are some error(s) detected.\",\n                                icon: \"error\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    // Init Tagify\n    const initTagify = () => {\n        // Get tagify elements\n        const elements = document.querySelectorAll('[data-kt-ecommerce-settings-type=\"tagify\"]');\n\n        // Init tagify\n        elements.forEach(element => {\n            new Tagify(element);\n        });\n    }\n\n    // Init Select2 with flags\n    const initSelect2Flags = () => {\n        // Format options\n        const optionFormat = (item) => {\n            if ( !item.id ) {\n                return item.text;\n            }\n\n            var span = document.createElement('span');\n            var template = '';\n\n            template += '<img src=\"' + item.element.getAttribute('data-kt-select2-country') + '\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';\n            template += item.text;\n\n            span.innerHTML = template;\n\n            return $(span);\n        }\n\n        // Init Select2 --- more info: https://select2.org/\n        $('[data-kt-ecommerce-settings-type=\"select2_flags\"]').select2({\n            placeholder: \"Select a country\",\n            minimumResultsForSearch: Infinity,\n            templateSelection: optionFormat,\n            templateResult: optionFormat\n        });\n    }\n\n    // Public methods\n    return {\n        init: function () {\n\n            initForms();\n            initTagify();\n            initSelect2Flags();\n\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTAppEcommerceSettings.init();\n});\n"],"names":[],"sourceRoot":""}