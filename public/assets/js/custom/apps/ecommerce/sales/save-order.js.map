{"version":3,"file":"js/custom/apps/ecommerce/sales/save-order.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8BAA8B;AAChD;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC","sources":["webpack://team1676-apps/./frontend/js/custom/apps/ecommerce/sales/save-order.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTAppEcommerceSalesSaveOrder = function () {\n    // Shared variables\n    var table;\n    var datatable;\n\n    // Private functions\n    const initSaveOrder = () => {\n        // Init flatpickr\n        $('#kt_ecommerce_edit_order_date').flatpickr({\n            altInput: true,\n            altFormat: \"d F, Y\",\n            dateFormat: \"Y-m-d\",\n        });\n\n        // Init select2 country options\n        // Format options\n        const optionFormat = (item) => {\n            if ( !item.id ) {\n                return item.text;\n            }\n\n            var span = document.createElement('span');\n            var template = '';\n\n            template += '<img src=\"' + item.element.getAttribute('data-kt-select2-country') + '\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';\n            template += item.text;\n\n            span.innerHTML = template;\n\n            return $(span);\n        }\n\n        // Init Select2 --- more info: https://select2.org/        \n        $('#kt_ecommerce_edit_order_billing_country').select2({\n            placeholder: \"Select a country\",\n            minimumResultsForSearch: Infinity,\n            templateSelection: optionFormat,\n            templateResult: optionFormat\n        });\n\n        $('#kt_ecommerce_edit_order_shipping_country').select2({\n            placeholder: \"Select a country\",\n            minimumResultsForSearch: Infinity,\n            templateSelection: optionFormat,\n            templateResult: optionFormat\n        });\n\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\n        table = document.querySelector('#kt_ecommerce_edit_order_product_table');\n        datatable = $(table).DataTable({\n            'order': [],\n            \"scrollY\": \"400px\",\n            \"scrollCollapse\": true,\n            \"paging\": false,\n            \"info\": false,\n            'columnDefs': [\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\n            ]\n        });\n    }\n\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n    var handleSearchDatatable = () => {\n        const filterSearch = document.querySelector('[data-kt-ecommerce-edit-order-filter=\"search\"]');\n        filterSearch.addEventListener('keyup', function (e) {\n            datatable.search(e.target.value).draw();\n        });\n    }\n\n    // Handle shipping form\n    const handleShippingForm = () => {\n        // Select elements\n        const element = document.getElementById('kt_ecommerce_edit_order_shipping_form');\n        const checkbox = document.getElementById('same_as_billing');\n\n        // Show/hide shipping form\n        checkbox.addEventListener('change', e => {\n            if (e.target.checked) {\n                element.classList.add('d-none');\n            } else {\n                element.classList.remove('d-none');\n            }\n        });\n    }\n\n    // Handle product select\n    const handleProductSelect = () => {\n        // Define variables\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n        const target = document.getElementById('kt_ecommerce_edit_order_selected_products');\n        const totalPrice = document.getElementById('kt_ecommerce_edit_order_total_price');\n\n        // Loop through all checked products\n        checkboxes.forEach(checkbox => {\n            checkbox.addEventListener('change', e => {\n                // Select parent row element\n                const parent = checkbox.closest('tr');\n                \n                // Clone parent element as variable\n                const product = parent.querySelector('[data-kt-ecommerce-edit-order-filter=\"product\"]').cloneNode(true);\n\n                // Create inner wrapper\n                const innerWrapper = document.createElement('div');\n                \n                // Store inner content\n                const innerContent = product.innerHTML;\n\n                // Add & remove classes on parent wrapper\n                const wrapperClassesAdd = ['col', 'my-2'];\n                const wrapperClassesRemove = ['d-flex', 'align-items-center'];\n\n                // Define additional classes\n                const additionalClasses = ['border', 'border-dashed', 'rounded', 'p-3', 'bg-body'];\n\n                // Update parent wrapper classes\n                product.classList.remove(...wrapperClassesRemove);\n                product.classList.add(...wrapperClassesAdd);\n\n                // Remove parent default content\n                product.innerHTML = '';\n\n                // Update inner wrapper classes\n                innerWrapper.classList.add(...wrapperClassesRemove);\n                innerWrapper.classList.add(...additionalClasses);                \n\n                // Apply stored inner content into new inner wrapper\n                innerWrapper.innerHTML = innerContent;\n\n                // Append new inner wrapper to parent wrapper\n                product.appendChild(innerWrapper);\n\n                // Get product id\n                const productId = product.getAttribute('data-kt-ecommerce-edit-order-id');\n\n                if (e.target.checked) {\n                    // Add product to selected product wrapper\n                    target.appendChild(product);\n                } else {\n                    // Remove product from selected product wrapper\n                    const selectedProduct = target.querySelector('[data-kt-ecommerce-edit-order-id=\"' + productId + '\"]');\n                    if (selectedProduct) {\n                        target.removeChild(selectedProduct);\n                    }\n                }\n\n                // Trigger empty message logic\n                detectEmpty();\n            });\n        });\n\n        // Handle empty list message\n        const detectEmpty = () => {\n            // Select elements\n            const message = target.querySelector('span');\n            const products = target.querySelectorAll('[data-kt-ecommerce-edit-order-filter=\"product\"]');\n\n            // Detect if element is empty\n            if (products.length < 1) {\n                // Show message\n                message.classList.remove('d-none');\n\n                // Reset price\n                totalPrice.innerText = '0.00';\n            } else {\n                // Hide message\n                message.classList.add('d-none');\n\n                // Calculate price\n                calculateTotal(products);\n            }\n        }\n\n        // Calculate total cost\n        const calculateTotal = (products) => {\n            let countPrice = 0;\n\n            // Loop through all selected prodcucts\n            products.forEach(product => {\n                // Get product price\n                const price = parseFloat(product.querySelector('[data-kt-ecommerce-edit-order-filter=\"price\"]').innerText);\n\n                // Add to total\n                countPrice = parseFloat(countPrice + price);\n            });\n\n            // Update total price\n            totalPrice.innerText = countPrice.toFixed(2);\n        }\n    }\n\n    // Submit form handler\n    const handleSubmit = () => {\n        // Define variables\n        let validator;\n\n        // Get elements\n        const form = document.getElementById('kt_ecommerce_edit_order_form');\n        const submitButton = document.getElementById('kt_ecommerce_edit_order_submit');\n\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'payment_method': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Payment method is required'\n                            }\n                        }\n                    },\n                    'shipping_method': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Shipping method is required'\n                            }\n                        }\n                    },\n                    'order_date': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Order date is required'\n                            }\n                        }\n                    },\n                    'billing_order_address_1': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Address line 1 is required'\n                            }\n                        }\n                    },\n                    'billing_order_postcode': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Postcode is required'\n                            }\n                        }\n                    },\n                    'billing_order_state': {\n                        validators: {\n                            notEmpty: {\n                                message: 'State is required'\n                            }\n                        }\n                    },\n                    'billing_order_country': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Country is required'\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        // Handle submit button\n        submitButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status == 'Valid') {\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable submit button whilst loading\n                        submitButton.disabled = true;\n\n                        setTimeout(function () {\n                            submitButton.removeAttribute('data-kt-indicator');\n\n                            Swal.fire({\n                                text: \"Form has been successfully submitted!\",\n                                icon: \"success\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            }).then(function (result) {\n                                if (result.isConfirmed) {\n                                    // Enable submit button after loading\n                                    submitButton.disabled = false;\n\n                                    // Redirect to customers list page\n                                    window.location = form.getAttribute(\"data-kt-redirect\");\n                                }\n                            });\n                        }, 2000);\n                    } else {\n                        Swal.fire({\n                            html: \"Sorry, looks like there are some errors detected, please try again.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        });\n                    }\n                });\n            }\n        })\n    }\n\n\n    // Public methods\n    return {\n        init: function () {\n\n            initSaveOrder();\n            handleSearchDatatable();\n            handleShippingForm();\n            handleProductSelect();\n            handleSubmit();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTAppEcommerceSalesSaveOrder.init();\n});\n"],"names":[],"sourceRoot":""}