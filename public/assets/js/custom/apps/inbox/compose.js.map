{"version":3,"file":"js/custom/apps/inbox/compose.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,yFAAyF;AACvG,cAAc,+EAA+E;AAC7F,cAAc,qFAAqF;AACnG,cAAc,wFAAwF;AACtG,cAAc,gGAAgG;AAC9G,cAAc,yFAAyF;AACvG,cAAc,uFAAuF;AACrG,cAAc;AACd;;AAEA;AACA;AACA,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA,iCAAiC,8BAA8B,EAAE,mCAAmC;AACpG,0BAA0B,4BAA4B;AACtD;AACA;AACA;AACA,oHAAoH,QAAQ,QAAQ,eAAe;AACnJ;AACA,yDAAyD,aAAa;AACtE;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB,8EAA8E,mCAAmC;AACjH;AACA;;AAEA,sBAAsB;AACtB;AACA,yHAAyH,QAAQ,QAAQ,eAAe;AACxJ;AACA;;AAEA;AACA,kCAAkC,aAAa;AAC/C,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC","sources":["webpack://team1676-apps/./app/views/js/custom/apps/inbox/compose.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTAppInboxCompose = function () {\n    // Private functions\n    // Init reply form\n    const initForm = () => {\n        // Set variables\n        const form = document.querySelector('#kt_inbox_compose_form');\n        const allTagify = form.querySelectorAll('[data-kt-inbox-form=\"tagify\"]');\n\n        // Handle CC and BCC\n        handleCCandBCC(form);\n\n        // Handle submit form\n        handleSubmit(form);\n\n        // Init tagify\n        allTagify.forEach(tagify => {\n            initTagify(tagify);\n        });\n\n        // Init quill editor\n        initQuill(form);\n\n        // Init dropzone\n        initDropzone(form);\n    }\n\n    // Handle CC and BCC toggle\n    const handleCCandBCC = (el) => {\n        // Get elements\n        const ccElement = el.querySelector('[data-kt-inbox-form=\"cc\"]');\n        const ccButton = el.querySelector('[data-kt-inbox-form=\"cc_button\"]');\n        const ccClose = el.querySelector('[data-kt-inbox-form=\"cc_close\"]');\n        const bccElement = el.querySelector('[data-kt-inbox-form=\"bcc\"]');\n        const bccButton = el.querySelector('[data-kt-inbox-form=\"bcc_button\"]');\n        const bccClose = el.querySelector('[data-kt-inbox-form=\"bcc_close\"]');\n\n        // Handle CC button click\n        ccButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            ccElement.classList.remove('d-none');\n            ccElement.classList.add('d-flex');\n        });\n\n        // Handle CC close button click\n        ccClose.addEventListener('click', e => {\n            e.preventDefault();\n\n            ccElement.classList.add('d-none');\n            ccElement.classList.remove('d-flex');\n        });\n\n        // Handle BCC button click\n        bccButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            bccElement.classList.remove('d-none');\n            bccElement.classList.add('d-flex');\n        });\n\n        // Handle CC close button click\n        bccClose.addEventListener('click', e => {\n            e.preventDefault();\n\n            bccElement.classList.add('d-none');\n            bccElement.classList.remove('d-flex');\n        });\n    }\n\n    // Handle submit form\n    const handleSubmit = (el) => {\n        const submitButton = el.querySelector('[data-kt-inbox-form=\"send\"]');\n\n        // Handle button click event\n        submitButton.addEventListener(\"click\", function () {\n            // Activate indicator\n            submitButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n            // Disable indicator after 3 seconds\n            setTimeout(function () {\n                submitButton.removeAttribute(\"data-kt-indicator\");\n            }, 3000);\n        });\n    }\n\n    // Init tagify \n    const initTagify = (el) => {\n        var inputElm = el;\n\n        const usersList = [\n            { value: 1, name: 'Emma Smith', avatar: 'avatars/300-6.jpg', email: 'e.smith@kpmg.com.au' },\n            { value: 2, name: 'Max Smith', avatar: 'avatars/300-1.jpg', email: 'max@kt.com' },\n            { value: 3, name: 'Sean Bean', avatar: 'avatars/300-5.jpg', email: 'sean@dellito.com' },\n            { value: 4, name: 'Brian Cox', avatar: 'avatars/300-25.jpg', email: 'brian@exchange.com' },\n            { value: 5, name: 'Francis Mitcham', avatar: 'avatars/300-9.jpg', email: 'f.mitcham@kpmg.com.au' },\n            { value: 6, name: 'Dan Wilson', avatar: 'avatars/300-23.jpg', email: 'dam@consilting.com' },\n            { value: 7, name: 'Ana Crown', avatar: 'avatars/300-12.jpg', email: 'ana.cf@limtel.com' },\n            { value: 8, name: 'John Miller', avatar: 'avatars/300-13.jpg', email: 'miller@mapple.com' }\n        ];\n\n        function tagTemplate(tagData) {\n            return `\n                <tag title=\"${(tagData.title || tagData.email)}\"\n                        contenteditable='false'\n                        spellcheck='false'\n                        tabIndex=\"-1\"\n                        class=\"${this.settings.classNames.tag} ${tagData.class ? tagData.class : \"\"}\"\n                        ${this.getAttributes(tagData)}>\n                    <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>\n                    <div class=\"d-flex align-items-center\">\n                        <div class='tagify__tag__avatar-wrap ps-0'>\n                            <img onerror=\"this.style.visibility='hidden'\" class=\"rounded-circle w-25px me-2\" src=\"${hostUrl}media/${tagData.avatar}\">\n                        </div>\n                        <span class='tagify__tag-text'>${tagData.name}</span>\n                    </div>\n                </tag>\n            `\n        }\n\n        function suggestionItemTemplate(tagData) {\n            return `\n                <div ${this.getAttributes(tagData)}\n                    class='tagify__dropdown__item d-flex align-items-center ${tagData.class ? tagData.class : \"\"}'\n                    tabindex=\"0\"\n                    role=\"option\">\n\n                    ${tagData.avatar ? `\n                            <div class='tagify__dropdown__item__avatar-wrap me-2'>\n                                <img onerror=\"this.style.visibility='hidden'\"  class=\"rounded-circle w-50px me-2\" src=\"${hostUrl}media/${tagData.avatar}\">\n                            </div>` : ''\n                }\n\n                    <div class=\"d-flex flex-column\">\n                        <strong>${tagData.name}</strong>\n                        <span>${tagData.email}</span>\n                    </div>\n                </div>\n            `\n        }\n\n        // initialize Tagify on the above input node reference\n        var tagify = new Tagify(inputElm, {\n            tagTextProp: 'name', // very important since a custom template is used with this property as text. allows typing a \"value\" or a \"name\" to match input with whitelist\n            enforceWhitelist: true,\n            skipInvalid: true, // do not remporarily add invalid tags\n            dropdown: {\n                closeOnSelect: false,\n                enabled: 0,\n                classname: 'users-list',\n                searchKeys: ['name', 'email']  // very important to set by which keys to search for suggesttions when typing\n            },\n            templates: {\n                tag: tagTemplate,\n                dropdownItem: suggestionItemTemplate\n            },\n            whitelist: usersList\n        })\n\n        tagify.on('dropdown:show dropdown:updated', onDropdownShow)\n        tagify.on('dropdown:select', onSelectSuggestion)\n\n        var addAllSuggestionsElm;\n\n        function onDropdownShow(e) {\n            var dropdownContentElm = e.detail.tagify.DOM.dropdown.content;\n\n            if (tagify.suggestedListItems.length > 1) {\n                addAllSuggestionsElm = getAddAllSuggestionsElm();\n\n                // insert \"addAllSuggestionsElm\" as the first element in the suggestions list\n                dropdownContentElm.insertBefore(addAllSuggestionsElm, dropdownContentElm.firstChild)\n            }\n        }\n\n        function onSelectSuggestion(e) {\n            if (e.detail.elm == addAllSuggestionsElm)\n                tagify.dropdown.selectAll.call(tagify);\n        }\n\n        // create a \"add all\" custom suggestion element every time the dropdown changes\n        function getAddAllSuggestionsElm() {\n            // suggestions items should be based on \"dropdownItem\" template\n            return tagify.parseTemplate('dropdownItem', [{\n                class: \"addAll\",\n                name: \"Add all\",\n                email: tagify.settings.whitelist.reduce(function (remainingSuggestions, item) {\n                    return tagify.isTagDuplicate(item.value) ? remainingSuggestions : remainingSuggestions + 1\n                }, 0) + \" Members\"\n            }]\n            )\n        }\n    }\n\n    // Init quill editor \n    const initQuill = (el) => {\n        var quill = new Quill('#kt_inbox_form_editor', {\n            modules: {\n                toolbar: [\n                    [{\n                        header: [1, 2, false]\n                    }],\n                    ['bold', 'italic', 'underline'],\n                    ['image', 'code-block']\n                ]\n            },\n            placeholder: 'Type your text here...',\n            theme: 'snow' // or 'bubble'\n        });\n\n        // Customize editor\n        const toolbar = el.querySelector('.ql-toolbar');\n\n        if (toolbar) {\n            const classes = ['px-5', 'border-top-0', 'border-start-0', 'border-end-0'];\n            toolbar.classList.add(...classes);\n        }\n    }\n\n    // Init dropzone\n    const initDropzone = (el) => {\n        // set the dropzone container id\n        const id = '[data-kt-inbox-form=\"dropzone\"]';\n        const dropzone = el.querySelector(id);\n        const uploadButton = el.querySelector('[data-kt-inbox-form=\"dropzone_upload\"]');\n\n        // set the preview element template\n        var previewNode = dropzone.querySelector(\".dropzone-item\");\n        previewNode.id = \"\";\n        var previewTemplate = previewNode.parentNode.innerHTML;\n        previewNode.parentNode.removeChild(previewNode);\n\n        var myDropzone = new Dropzone(id, { // Make the whole body a dropzone\n            url: \"https://preview.keenthemes.com/api/dropzone/void.php\", // Set the url for your upload script location\n            parallelUploads: 20,\n            maxFilesize: 1, // Max filesize in MB\n            previewTemplate: previewTemplate,\n            previewsContainer: id + \" .dropzone-items\", // Define the container to display the previews\n            clickable: uploadButton // Define the element that should be used as click trigger to select files.\n        });\n\n\n        myDropzone.on(\"addedfile\", function (file) {\n            // Hookup the start button\n            const dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\n            dropzoneItems.forEach(dropzoneItem => {\n                dropzoneItem.style.display = '';\n            });\n        });\n\n        // Update the total progress bar\n        myDropzone.on(\"totaluploadprogress\", function (progress) {\n            const progressBars = dropzone.querySelectorAll('.progress-bar');\n            progressBars.forEach(progressBar => {\n                progressBar.style.width = progress + \"%\";\n            });\n        });\n\n        myDropzone.on(\"sending\", function (file) {\n            // Show the total progress bar when upload starts\n            const progressBars = dropzone.querySelectorAll('.progress-bar');\n            progressBars.forEach(progressBar => {\n                progressBar.style.opacity = \"1\";\n            });\n        });\n\n        // Hide the total progress bar when nothing\"s uploading anymore\n        myDropzone.on(\"complete\", function (progress) {\n            const progressBars = dropzone.querySelectorAll('.dz-complete');\n\n            setTimeout(function () {\n                progressBars.forEach(progressBar => {\n                    progressBar.querySelector('.progress-bar').style.opacity = \"0\";\n                    progressBar.querySelector('.progress').style.opacity = \"0\";\n                });\n            }, 300);\n        });\n    }\n\n\n    // Public methods\n    return {\n        init: function () {\n            initForm();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTAppInboxCompose.init();\n});\n"],"names":[],"sourceRoot":""}