{"version":3,"file":"js/custom/apps/file-manager/list.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,cAAc;AAChC,kBAAkB,cAAc;AAChC,kBAAkB,cAAc;AAChC,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,kBAAkB,cAAc;AAChC,kBAAkB,cAAc;AAChC,kBAAkB,cAAc;AAChC,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+DAA+D;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,iFAAiF;;AAEjF;AACA;AACA;AACA;AACA;;AAEA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,6BAA6B;AAC7B,0BAA0B;AAC1B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C,4HAA4H,SAAS;AACrI;;AAEA;AACA;AACA,iCAAiC;AACjC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB,wGAAwG,UAAU;AAClH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,iDAAiD;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;AACA,0CAA0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,kDAAkD;AAClD,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;;AAErC;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC,E","sources":["webpack://team1676-apps/./app/views/js/custom/apps/file-manager/list.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTFileManagerList = function () {\n    // Define shared variables\n    var datatable;\n    var table\n\n    // Define template element variables\n    var uploadTemplate;\n    var renameTemplate;\n    var actionTemplate;\n    var checkboxTemplate;\n\n\n    // Private functions\n    const initTemplates = () => {\n        uploadTemplate = document.querySelector('[data-kt-filemanager-template=\"upload\"]');\n        renameTemplate = document.querySelector('[data-kt-filemanager-template=\"rename\"]');\n        actionTemplate = document.querySelector('[data-kt-filemanager-template=\"action\"]');\n        checkboxTemplate = document.querySelector('[data-kt-filemanager-template=\"checkbox\"]');\n    }\n\n    const initDatatable = () => {\n        // Set date data order\n        const tableRows = table.querySelectorAll('tbody tr');\n\n        tableRows.forEach(row => {\n            const dateRow = row.querySelectorAll('td');\n            const dateCol = dateRow[3]; // select date from 4th column in table\n            const realDate = moment(dateCol.innerHTML, \"DD MMM YYYY, LT\").format();\n            dateCol.setAttribute('data-order', realDate);\n        });\n\n        const foldersListOptions = {\n            \"info\": false,\n            'order': [],\n            \"scrollY\": \"700px\",\n            \"scrollCollapse\": true,\n            \"paging\": false,\n            'ordering': false,\n            'columns': [\n                { data: 'checkbox' },\n                { data: 'name' },\n                { data: 'size' },\n                { data: 'date' },\n                { data: 'action' },\n            ],\n            'language': {\n                emptyTable: `<div class=\"d-flex flex-column flex-center\">\n                    <img src=\"${hostUrl}media/illustrations/sketchy-1/5.png\" class=\"mw-400px\" />\n                    <div class=\"fs-1 fw-bolder text-dark\">No items found.</div>\n                    <div class=\"fs-6\">Start creating new folders or uploading a new file!</div>\n                </div>`\n            }\n        };\n\n        const filesListOptions = {\n            \"info\": false,\n            'order': [],\n            'pageLength': 10,\n            \"lengthChange\": false,\n            'ordering': false,\n            'columns': [\n                { data: 'checkbox' },\n                { data: 'name' },\n                { data: 'size' },\n                { data: 'date' },\n                { data: 'action' },\n            ],\n            'language': {\n                emptyTable: `<div class=\"d-flex flex-column flex-center\">\n                    <img src=\"${hostUrl}media/illustrations/sketchy-1/5.png\" class=\"mw-400px\" />\n                    <div class=\"fs-1 fw-bolder text-dark mb-4\">No items found.</div>\n                    <div class=\"fs-6\">Start creating new folders or uploading a new file!</div>\n                </div>`\n            },\n            conditionalPaging: true\n        };\n\n        // Define datatable options to load\n        var loadOptions;\n        if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\n            loadOptions = foldersListOptions;\n        } else {\n            loadOptions = filesListOptions;\n        }\n\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\n        datatable = $(table).DataTable(loadOptions);\n\n        // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n        datatable.on('draw', function () {\n            initToggleToolbar();\n            handleDeleteRows();\n            toggleToolbars();\n            resetNewFolder();\n            KTMenu.createInstances();\n            initCopyLink();\n            countTotalItems();\n            handleRename();\n        });\n    }\n\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n    const handleSearchDatatable = () => {\n        const filterSearch = document.querySelector('[data-kt-filemanager-table-filter=\"search\"]');\n        filterSearch.addEventListener('keyup', function (e) {\n            datatable.search(e.target.value).draw();\n        });\n    }\n\n    // Delete customer\n    const handleDeleteRows = () => {\n        // Select all delete buttons\n        const deleteButtons = table.querySelectorAll('[data-kt-filemanager-table-filter=\"delete_row\"]');\n\n        deleteButtons.forEach(d => {\n            // Delete button on click\n            d.addEventListener('click', function (e) {\n                e.preventDefault();\n\n                // Select parent row\n                const parent = e.target.closest('tr');\n\n                // Get customer name\n                const fileName = parent.querySelectorAll('td')[1].innerText;\n\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n                Swal.fire({\n                    text: \"Are you sure you want to delete \" + fileName + \"?\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    buttonsStyling: false,\n                    confirmButtonText: \"Yes, delete!\",\n                    cancelButtonText: \"No, cancel\",\n                    customClass: {\n                        confirmButton: \"btn fw-bold btn-danger\",\n                        cancelButton: \"btn fw-bold btn-active-light-primary\"\n                    }\n                }).then(function (result) {\n                    if (result.value) {\n                        Swal.fire({\n                            text: \"You have deleted \" + fileName + \"!.\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        }).then(function () {\n                            // Remove current row\n                            datatable.row($(parent)).remove().draw();\n                        });\n                    } else if (result.dismiss === 'cancel') {\n                        Swal.fire({\n                            text: customerName + \" was not deleted.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        });\n                    }\n                });\n            })\n        });\n    }\n\n    // Init toggle toolbar\n    const initToggleToolbar = () => {\n        // Toggle selected action toolbar\n        // Select all checkboxes\n        var checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n        if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\n            checkboxes = document.querySelectorAll('#kt_file_manager_list_wrapper [type=\"checkbox\"]');\n        }\n\n        // Select elements\n        const deleteSelected = document.querySelector('[data-kt-filemanager-table-select=\"delete_selected\"]');\n\n        // Toggle delete selected toolbar\n        checkboxes.forEach(c => {\n            // Checkbox on click event\n            c.addEventListener('click', function () {\n                console.log(c);\n                setTimeout(function () {\n                    toggleToolbars();\n                }, 50);\n            });\n        });\n\n        // Deleted selected rows\n        deleteSelected.addEventListener('click', function () {\n            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n            Swal.fire({\n                text: \"Are you sure you want to delete selected files or folders?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, delete!\",\n                cancelButtonText: \"No, cancel\",\n                customClass: {\n                    confirmButton: \"btn fw-bold btn-danger\",\n                    cancelButton: \"btn fw-bold btn-active-light-primary\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    Swal.fire({\n                        text: \"You have deleted all selected  files or folders!.\",\n                        icon: \"success\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn fw-bold btn-primary\",\n                        }\n                    }).then(function () {\n                        // Remove all selected customers\n                        checkboxes.forEach(c => {\n                            if (c.checked) {\n                                datatable.row($(c.closest('tbody tr'))).remove().draw();\n                            }\n                        });\n\n                        // Remove header checked box\n                        const headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n                        headerCheckbox.checked = false;\n                    });\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Selected  files or folders was not deleted.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn fw-bold btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    // Toggle toolbars\n    const toggleToolbars = () => {\n        // Define variables\n        const toolbarBase = document.querySelector('[data-kt-filemanager-table-toolbar=\"base\"]');\n        const toolbarSelected = document.querySelector('[data-kt-filemanager-table-toolbar=\"selected\"]');\n        const selectedCount = document.querySelector('[data-kt-filemanager-table-select=\"selected_count\"]');\n\n        // Select refreshed checkbox DOM elements \n        const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\n\n        // Detect checkboxes state & count\n        let checkedState = false;\n        let count = 0;\n\n        // Count checked boxes\n        allCheckboxes.forEach(c => {\n            if (c.checked) {\n                checkedState = true;\n                count++;\n            }\n        });\n\n        // Toggle toolbars\n        if (checkedState) {\n            selectedCount.innerHTML = count;\n            toolbarBase.classList.add('d-none');\n            toolbarSelected.classList.remove('d-none');\n        } else {\n            toolbarBase.classList.remove('d-none');\n            toolbarSelected.classList.add('d-none');\n        }\n    }\n\n    // Handle new folder\n    const handleNewFolder = () => {\n        // Select button\n        const newFolder = document.getElementById('kt_file_manager_new_folder');\n\n        // Handle click action\n        newFolder.addEventListener('click', e => {\n            e.preventDefault();\n\n            // Ignore if input already exist\n            if (table.querySelector('#kt_file_manager_new_folder_row')) {\n                return;\n            }\n\n            // Add new blank row to datatable\n            const tableBody = table.querySelector('tbody');\n            const rowElement = uploadTemplate.cloneNode(true); // Clone template markup\n            tableBody.prepend(rowElement);\n\n            // Define template interactive elements\n            const rowForm = rowElement.querySelector('#kt_file_manager_add_folder_form');\n            const rowButton = rowElement.querySelector('#kt_file_manager_add_folder');\n            const cancelButton = rowElement.querySelector('#kt_file_manager_cancel_folder');\n            const folderIcon = rowElement.querySelector('.svg-icon-2x');\n            const rowInput = rowElement.querySelector('[name=\"new_folder_name\"]');\n\n            // Define validator\n            // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n            var validator = FormValidation.formValidation(\n                rowForm,\n                {\n                    fields: {\n                        'new_folder_name': {\n                            validators: {\n                                notEmpty: {\n                                    message: 'Folder name is required'\n                                }\n                            }\n                        },\n                    },\n                    plugins: {\n                        trigger: new FormValidation.plugins.Trigger(),\n                        bootstrap: new FormValidation.plugins.Bootstrap5({\n                            rowSelector: '.fv-row',\n                            eleInvalidClass: '',\n                            eleValidClass: ''\n                        })\n                    }\n                }\n            );\n\n            // Handle add new folder button\n            rowButton.addEventListener('click', e => {\n                e.preventDefault();\n\n                // Activate indicator\n                rowButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n                // Validate form before submit\n                if (validator) {\n                    validator.validate().then(function (status) {\n                        console.log('validated!');\n\n                        if (status == 'Valid') {\n                            // Simulate process for demo only\n                            setTimeout(function () {\n                                // Create folder link\n                                const folderLink = document.createElement('a');\n                                const folderLinkClasses = ['text-gray-800', 'text-hover-primary'];\n                                folderLink.setAttribute('href', '?page=apps/file-manager/blank');\n                                folderLink.classList.add(...folderLinkClasses);\n                                folderLink.innerText = rowInput.value;\n\n                                const newRow = datatable.row.add({\n                                    'checkbox': checkboxTemplate.innerHTML,\n                                    'name': folderIcon.outerHTML + folderLink.outerHTML,\n                                    \"size\": '-',\n                                    \"date\": '-',\n                                    'action': actionTemplate.innerHTML\n                                }).node();\n                                $(newRow).find('td').eq(4).attr('data-kt-filemanager-table', 'action_dropdown');\n                                $(newRow).find('td').eq(4).addClass('text-end'); // Add custom class to last 'td' element --- more info: https://datatables.net/forums/discussion/22341/row-add-cell-class\n\n                                // Re-sort datatable to allow new folder added at the top\n                                var index = datatable.row(0).index(),\n                                    rowCount = datatable.data().length - 1,\n                                    insertedRow = datatable.row(rowCount).data(),\n                                    tempRow;\n\n                                for (var i = rowCount; i > index; i--) {\n                                    tempRow = datatable.row(i - 1).data();\n                                    datatable.row(i).data(tempRow);\n                                    datatable.row(i - 1).data(insertedRow);\n                                }\n\n                                toastr.options = {\n                                    \"closeButton\": true,\n                                    \"debug\": false,\n                                    \"newestOnTop\": false,\n                                    \"progressBar\": false,\n                                    \"positionClass\": \"toastr-top-right\",\n                                    \"preventDuplicates\": false,\n                                    \"showDuration\": \"300\",\n                                    \"hideDuration\": \"1000\",\n                                    \"timeOut\": \"5000\",\n                                    \"extendedTimeOut\": \"1000\",\n                                    \"showEasing\": \"swing\",\n                                    \"hideEasing\": \"linear\",\n                                    \"showMethod\": \"fadeIn\",\n                                    \"hideMethod\": \"fadeOut\"\n                                };\n\n                                toastr.success(rowInput.value + ' was created!');\n\n                                // Disable indicator\n                                rowButton.removeAttribute(\"data-kt-indicator\");\n\n                                // Reset input\n                                rowInput.value = '';\n\n                                datatable.draw(false);\n\n                            }, 2000);\n                        } else {\n                            // Disable indicator\n                            rowButton.removeAttribute(\"data-kt-indicator\");\n                        }\n                    });\n                }\n            });\n\n            // Handle cancel new folder button\n            cancelButton.addEventListener('click', e => {\n                e.preventDefault();\n\n                // Activate indicator\n                cancelButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n                setTimeout(function () {\n                    // Disable indicator\n                    cancelButton.removeAttribute(\"data-kt-indicator\");\n\n                    // Toggle toastr\n                    toastr.options = {\n                        \"closeButton\": true,\n                        \"debug\": false,\n                        \"newestOnTop\": false,\n                        \"progressBar\": false,\n                        \"positionClass\": \"toastr-top-right\",\n                        \"preventDuplicates\": false,\n                        \"showDuration\": \"300\",\n                        \"hideDuration\": \"1000\",\n                        \"timeOut\": \"5000\",\n                        \"extendedTimeOut\": \"1000\",\n                        \"showEasing\": \"swing\",\n                        \"hideEasing\": \"linear\",\n                        \"showMethod\": \"fadeIn\",\n                        \"hideMethod\": \"fadeOut\"\n                    };\n\n                    toastr.error('Cancelled new folder creation');\n                    resetNewFolder();\n                }, 1000);\n            });\n        });\n    }\n\n    // Reset add new folder input\n    const resetNewFolder = () => {\n        const newFolderRow = table.querySelector('#kt_file_manager_new_folder_row');\n\n        if (newFolderRow) {\n            newFolderRow.parentNode.removeChild(newFolderRow);\n        }\n    }\n\n    // Handle rename file or folder\n    const handleRename = () => {\n        const renameButton = table.querySelectorAll('[data-kt-filemanager-table=\"rename\"]');     \n\n        renameButton.forEach(button => {\n            button.addEventListener('click', renameCallback);\n        });\n    }\n\n    // Rename callback\n    const renameCallback = (e) => {\n        e.preventDefault();\n\n        // Define shared value\n        let nameValue;\n\n        // Stop renaming if there's an input existing\n        if (table.querySelectorAll('#kt_file_manager_rename_input').length > 0) {\n            Swal.fire({\n                text: \"Unsaved input detected. Please save or cancel the current item\",\n                icon: \"warning\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                    confirmButton: \"btn fw-bold btn-danger\"\n                }\n            });\n\n            return;\n        }\n\n        // Select parent row\n        const parent = e.target.closest('tr');\n\n        // Get name column\n        const nameCol = parent.querySelectorAll('td')[1];\n        const colIcon = nameCol.querySelector('.svg-icon');\n        nameValue = nameCol.innerText;\n\n        // Set rename input template\n        const renameInput = renameTemplate.cloneNode(true);\n        renameInput.querySelector('#kt_file_manager_rename_folder_icon').innerHTML = colIcon.outerHTML;\n\n        // Swap current column content with input template\n        nameCol.innerHTML = renameInput.innerHTML;\n\n        // Set input value with current file/folder name\n        parent.querySelector('#kt_file_manager_rename_input').value = nameValue;\n\n        // Rename file / folder validator\n        var renameValidator = FormValidation.formValidation(\n            nameCol,\n            {\n                fields: {\n                    'rename_folder_name': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Name is required'\n                            }\n                        }\n                    },\n                },\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        // Rename input button action\n        const renameInputButton = document.querySelector('#kt_file_manager_rename_folder');\n        renameInputButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            // Detect if valid\n            if (renameValidator) {\n                renameValidator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status == 'Valid') {\n                        // Pop up confirmation\n                        Swal.fire({\n                            text: \"Are you sure you want to rename \" + nameValue + \"?\",\n                            icon: \"warning\",\n                            showCancelButton: true,\n                            buttonsStyling: false,\n                            confirmButtonText: \"Yes, rename it!\",\n                            cancelButtonText: \"No, cancel\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-danger\",\n                                cancelButton: \"btn fw-bold btn-active-light-primary\"\n                            }\n                        }).then(function (result) {\n                            if (result.value) {\n                                Swal.fire({\n                                    text: \"You have renamed \" + nameValue + \"!.\",\n                                    icon: \"success\",\n                                    buttonsStyling: false,\n                                    confirmButtonText: \"Ok, got it!\",\n                                    customClass: {\n                                        confirmButton: \"btn fw-bold btn-primary\",\n                                    }\n                                }).then(function () {\n                                    // Get new file / folder name value\n                                    const newValue = document.querySelector('#kt_file_manager_rename_input').value;\n\n                                    // New column data template\n                                    const newData = `<div class=\"d-flex align-items-center\">\n                                        ${colIcon.outerHTML}\n                                        <a href=\"?page=apps/file-manager/files/\" class=\"text-gray-800 text-hover-primary\">${newValue}</a>\n                                    </div>`;\n\n                                    // Draw datatable with new content -- Add more events here for any server-side events\n                                    datatable.cell($(nameCol)).data(newData).draw();\n                                });\n                            } else if (result.dismiss === 'cancel') {\n                                Swal.fire({\n                                    text: nameValue + \" was not renamed.\",\n                                    icon: \"error\",\n                                    buttonsStyling: false,\n                                    confirmButtonText: \"Ok, got it!\",\n                                    customClass: {\n                                        confirmButton: \"btn fw-bold btn-primary\",\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        // Cancel rename input\n        const cancelInputButton = document.querySelector('#kt_file_manager_rename_folder_cancel');\n        cancelInputButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            // Simulate process for demo only\n            cancelInputButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n            setTimeout(function () {\n                const revertTemplate = `<div class=\"d-flex align-items-center\">\n                    ${colIcon.outerHTML}\n                    <a href=\"?page=apps/file-manager/files/\" class=\"text-gray-800 text-hover-primary\">${nameValue}</a>\n                </div>`;\n\n                // Remove spinner\n                cancelInputButton.removeAttribute(\"data-kt-indicator\");\n\n                // Draw datatable with new content -- Add more events here for any server-side events\n                datatable.cell($(nameCol)).data(revertTemplate).draw();\n\n                // Toggle toastr\n                toastr.options = {\n                    \"closeButton\": true,\n                    \"debug\": false,\n                    \"newestOnTop\": false,\n                    \"progressBar\": false,\n                    \"positionClass\": \"toastr-top-right\",\n                    \"preventDuplicates\": false,\n                    \"showDuration\": \"300\",\n                    \"hideDuration\": \"1000\",\n                    \"timeOut\": \"5000\",\n                    \"extendedTimeOut\": \"1000\",\n                    \"showEasing\": \"swing\",\n                    \"hideEasing\": \"linear\",\n                    \"showMethod\": \"fadeIn\",\n                    \"hideMethod\": \"fadeOut\"\n                };\n\n                toastr.error('Cancelled rename function');\n            }, 1000);\n        });\n    }\n\n    // Init dropzone\n    const initDropzone = () => {\n        // set the dropzone container id\n        const id = \"#kt_modal_upload_dropzone\";\n        const dropzone = document.querySelector(id);\n\n        // set the preview element template\n        var previewNode = dropzone.querySelector(\".dropzone-item\");\n        previewNode.id = \"\";\n        var previewTemplate = previewNode.parentNode.innerHTML;\n        previewNode.parentNode.removeChild(previewNode);\n\n        var myDropzone = new Dropzone(id, { // Make the whole body a dropzone\n            url: \"path/to/your/server\", // Set the url for your upload script location\n            parallelUploads: 10,\n            previewTemplate: previewTemplate,\n            maxFilesize: 1, // Max filesize in MB\n            autoProcessQueue: false, // Stop auto upload\n            autoQueue: false, // Make sure the files aren't queued until manually added\n            previewsContainer: id + \" .dropzone-items\", // Define the container to display the previews\n            clickable: id + \" .dropzone-select\" // Define the element that should be used as click trigger to select files.\n        });\n\n        myDropzone.on(\"addedfile\", function (file) {\n            // Hook each start button\n            file.previewElement.querySelector(id + \" .dropzone-start\").onclick = function () {\n                // myDropzone.enqueueFile(file); -- default dropzone function\n\n                // Process simulation for demo only\n                const progressBar = file.previewElement.querySelector('.progress-bar');\n                progressBar.style.opacity = \"1\";\n                var width = 1;\n                var timer = setInterval(function () {\n                    if (width >= 100) {\n                        myDropzone.emit(\"success\", file);\n                        myDropzone.emit(\"complete\", file);\n                        clearInterval(timer);\n                    } else {\n                        width++;\n                        progressBar.style.width = width + '%';\n                    }\n                }, 20);\n            };\n\n            const dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\n            dropzoneItems.forEach(dropzoneItem => {\n                dropzoneItem.style.display = '';\n            });\n            dropzone.querySelector('.dropzone-upload').style.display = \"inline-block\";\n            dropzone.querySelector('.dropzone-remove-all').style.display = \"inline-block\";\n        });\n\n        // Hide the total progress bar when nothing's uploading anymore\n        myDropzone.on(\"complete\", function (file) {\n            const progressBars = dropzone.querySelectorAll('.dz-complete');\n            setTimeout(function () {\n                progressBars.forEach(progressBar => {\n                    progressBar.querySelector('.progress-bar').style.opacity = \"0\";\n                    progressBar.querySelector('.progress').style.opacity = \"0\";\n                    progressBar.querySelector('.dropzone-start').style.opacity = \"0\";\n                });\n            }, 300);\n        });\n\n        // Setup the buttons for all transfers\n        dropzone.querySelector(\".dropzone-upload\").addEventListener('click', function () {\n            // myDropzone.processQueue(); --- default dropzone process\n\n            // Process simulation for demo only\n            myDropzone.files.forEach(file => {\n                const progressBar = file.previewElement.querySelector('.progress-bar');\n                progressBar.style.opacity = \"1\";\n                var width = 1;\n                var timer = setInterval(function () {\n                    if (width >= 100) {\n                        myDropzone.emit(\"success\", file);\n                        myDropzone.emit(\"complete\", file);\n                        clearInterval(timer);\n                    } else {\n                        width++;\n                        progressBar.style.width = width + '%';\n                    }\n                }, 20);\n            });\n        });\n\n        // Setup the button for remove all files\n        dropzone.querySelector(\".dropzone-remove-all\").addEventListener('click', function () {\n            Swal.fire({\n                text: \"Are you sure you would like to remove all files?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, remove it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n                    dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n                    myDropzone.removeAllFiles(true);\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your files was not removed!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n\n        // On all files completed upload\n        myDropzone.on(\"queuecomplete\", function (progress) {\n            const uploadIcons = dropzone.querySelectorAll('.dropzone-upload');\n            uploadIcons.forEach(uploadIcon => {\n                uploadIcon.style.display = \"none\";\n            });\n        });\n\n        // On all files removed\n        myDropzone.on(\"removedfile\", function (file) {\n            if (myDropzone.files.length < 1) {\n                dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n                dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n            }\n        });\n    }\n\n    // Init copy link\n    const initCopyLink = () => {\n        // Select all copy link elements\n        const elements = table.querySelectorAll('[data-kt-filemanger-table=\"copy_link\"]');\n\n        elements.forEach(el => {\n            // Define elements\n            const button = el.querySelector('button');\n            const generator = el.querySelector('[data-kt-filemanger-table=\"copy_link_generator\"]');\n            const result = el.querySelector('[data-kt-filemanger-table=\"copy_link_result\"]');\n            const input = el.querySelector('input');\n\n            // Click action\n            button.addEventListener('click', e => {\n                e.preventDefault();\n\n                // Reset toggle\n                generator.classList.remove('d-none');\n                result.classList.add('d-none');\n\n                var linkTimeout;\n                clearTimeout(linkTimeout);\n                linkTimeout = setTimeout(() => {\n                    generator.classList.add('d-none');\n                    result.classList.remove('d-none');\n                    input.select();\n                }, 2000);\n            });\n        });\n    }\n\n    // Handle move to folder\n    const handleMoveToFolder = () => {\n        const element = document.querySelector('#kt_modal_move_to_folder');\n        const form = element.querySelector('#kt_modal_move_to_folder_form');\n        const saveButton = form.querySelector('#kt_modal_move_to_folder_submit');\n        const moveModal = new bootstrap.Modal(element);\n\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        var validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'move_to_folder': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Please select a folder.'\n                            }\n                        }\n                    },\n                },\n\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        saveButton.addEventListener('click', e => {\n            e.preventDefault();\n\n            saveButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n            if (validator) {\n                validator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status == 'Valid') {\n                        // Simulate process for demo only\n                        setTimeout(function () {\n\n                            Swal.fire({\n                                text: \"Are you sure you would like to move to this folder\",\n                                icon: \"warning\",\n                                showCancelButton: true,\n                                buttonsStyling: false,\n                                confirmButtonText: \"Yes, move it!\",\n                                cancelButtonText: \"No, return\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\",\n                                    cancelButton: \"btn btn-active-light\"\n                                }\n                            }).then(function (result) {\n                                if (result.isConfirmed) {\n                                    form.reset(); // Reset form\t\n                                    moveModal.hide(); // Hide modal\t\t\t\n\n                                    toastr.options = {\n                                        \"closeButton\": true,\n                                        \"debug\": false,\n                                        \"newestOnTop\": false,\n                                        \"progressBar\": false,\n                                        \"positionClass\": \"toastr-top-right\",\n                                        \"preventDuplicates\": false,\n                                        \"showDuration\": \"300\",\n                                        \"hideDuration\": \"1000\",\n                                        \"timeOut\": \"5000\",\n                                        \"extendedTimeOut\": \"1000\",\n                                        \"showEasing\": \"swing\",\n                                        \"hideEasing\": \"linear\",\n                                        \"showMethod\": \"fadeIn\",\n                                        \"hideMethod\": \"fadeOut\"\n                                    };\n\n                                    toastr.success('1 item has been moved.');\n\n                                    saveButton.removeAttribute(\"data-kt-indicator\");\n                                } else {\n                                    Swal.fire({\n                                        text: \"Your action has been cancelled!.\",\n                                        icon: \"error\",\n                                        buttonsStyling: false,\n                                        confirmButtonText: \"Ok, got it!\",\n                                        customClass: {\n                                            confirmButton: \"btn btn-primary\",\n                                        }\n                                    });\n\n                                    saveButton.removeAttribute(\"data-kt-indicator\");\n                                }\n                            });\n                        }, 500);\n                    } else {\n                        saveButton.removeAttribute(\"data-kt-indicator\");\n                    }\n                });\n            }\n        });\n    }\n\n    // Count total number of items\n    const countTotalItems = () => {\n        const counter = document.getElementById('kt_file_manager_items_counter');\n\n        // Count total number of elements in datatable --- more info: https://datatables.net/reference/api/count()\n        counter.innerText = datatable.rows().count() + ' items';\n    }\n\n    // Public methods\n    return {\n        init: function () {\n            table = document.querySelector('#kt_file_manager_list');\n\n            if (!table) {\n                return;\n            }\n\n            initTemplates();\n            initDatatable();\n            initToggleToolbar();\n            handleSearchDatatable();\n            handleDeleteRows();\n            handleNewFolder();\n            initDropzone();\n            initCopyLink();\n            handleRename();\n            handleMoveToFolder();\n            countTotalItems();\n            KTMenu.createInstances();\n        }\n    }\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTFileManagerList.init();\n});"],"names":[],"sourceRoot":""}