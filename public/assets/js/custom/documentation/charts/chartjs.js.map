{"version":3,"file":"js/custom/documentation/charts/chartjs.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC","sources":["webpack://team1676-apps/./frontend/js/custom/documentation/charts/chartjs.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTGeneralChartJS = function () {\n    // Randomizer function\n    function getRandom(min = 1, max = 100) {\n        return Math.floor(Math.random() * (max - min) + min);\n    }\n\n    function generateRandomData(min = 1, max = 100, count = 10) {\n        var arr = [];\n        for (var i = 0; i < count; i++) {\n            arr.push(getRandom(min, max));\n        }\n        return arr;\n    }\n\n    // Private functions\n    var example1 = function () {\n        // Define chart element\n        var ctx = document.getElementById('kt_chartjs_1');\n\n        // Define colors\n        var primaryColor = KTUtil.getCssVariableValue('--kt-primary');\n        var dangerColor = KTUtil.getCssVariableValue('--kt-danger');\n        var successColor = KTUtil.getCssVariableValue('--kt-success');\n\n        // Define fonts\n        var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n        // Chart labels\n        const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n        // Chart data\n        const data = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Dataset 1',\n                    data: generateRandomData(1, 100, 12),\n                    backgroundColor: primaryColor,\n                    stack: 'Stack 0',\n                },\n                {\n                    label: 'Dataset 2',\n                    data: generateRandomData(1, 100, 12),\n                    backgroundColor: dangerColor,\n                    stack: 'Stack 1',\n                },\n                {\n                    label: 'Dataset 3',\n                    data: generateRandomData(1, 100, 12),\n                    backgroundColor: successColor,\n                    stack: 'Stack 2',\n                },\n            ]\n        };\n\n        // Chart config\n        const config = {\n            type: 'bar',\n            data: data,\n            options: {\n                plugins: {\n                    title: {\n                        display: false,\n                    }\n                },\n                responsive: true,\n                interaction: {\n                    intersect: false,\n                },\n                scales: {\n                    x: {\n                        stacked: true,\n                    },\n                    y: {\n                        stacked: true\n                    }\n                }\n            }\n        };\n\n        // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n        var myChart = new Chart(ctx, config);\n    }\n\n    var example2 = function () {\n        // Define chart element\n        var ctx = document.getElementById('kt_chartjs_2');\n\n        // Define colors\n        var primaryColor = KTUtil.getCssVariableValue('--kt-primary');\n        var dangerColor = KTUtil.getCssVariableValue('--kt-danger');\n        var successColor = KTUtil.getCssVariableValue('--kt-success');\n\n        // Define fonts\n        var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n        // Chart labels\n        const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\n        // Chart data\n        const data = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Dataset 1',\n                    data: generateRandomData(1, 50, 7),\n                    borderColor: primaryColor,\n                    backgroundColor: 'transparent'\n                },\n                {\n                    label: 'Dataset 2',\n                    data: generateRandomData(1, 50, 7),\n                    borderColor: dangerColor,\n                    backgroundColor: 'transparent'\n                },\n            ]\n        };\n\n        // Chart config\n        const config = {\n            type: 'line',\n            data: data,\n            options: {\n                plugins: {\n                    title: {\n                        display: false,\n                    }\n                },\n                responsive: true,\n            }\n        };\n\n        // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n        var myChart = new Chart(ctx, config);\n    }\n\n    var example3 = function () {\n        // Define chart element\n        var ctx = document.getElementById('kt_chartjs_3');\n\n        // Define colors\n        var primaryColor = KTUtil.getCssVariableValue('--kt-primary');\n        var dangerColor = KTUtil.getCssVariableValue('--kt-danger');\n        var successColor = KTUtil.getCssVariableValue('--kt-success');\n        var warningColor = KTUtil.getCssVariableValue('--kt-warning');\n        var infoColor = KTUtil.getCssVariableValue('--kt-info');\n\n        // Chart labels\n        const labels = ['January', 'February', 'March', 'April', 'May'];\n\n        // Chart data\n        const data = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Dataset 1',\n                    data: generateRandomData(1, 100, 5),\n                    backgroundColor: [primaryColor, dangerColor, successColor, warningColor, infoColor]\n                },\n            ]\n        };\n\n        // Chart config\n        const config = {\n            type: 'pie',\n            data: data,\n            options: {\n                plugins: {\n                    title: {\n                        display: false,\n                    }\n                },\n                responsive: true,\n            }\n        };\n\n        // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n        var myChart = new Chart(ctx, config);\n    }\n\n    var example4 = function () {\n        // Define chart element\n        var ctx = document.getElementById('kt_chartjs_4');\n\n        // Define colors\n        var primaryColor = KTUtil.getCssVariableValue('--kt-primary');\n        var dangerColor = KTUtil.getCssVariableValue('--kt-danger');\n        var dangerLightColor = KTUtil.getCssVariableValue('--kt-danger-light');\n\n        // Define fonts\n        var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n        // Chart labels\n        const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n        // Chart data\n        const data = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Dataset 1',\n                    data: generateRandomData(50, 100, 12),\n                    borderColor: primaryColor,\n                    backgroundColor: 'transparent',\n                    stack: 'combined'\n                },\n                {\n                    label: 'Dataset 2',\n                    data: generateRandomData(1, 60, 12),\n                    backgroundColor: dangerColor,\n                    borderColor: dangerColor,\n                    stack: 'combined',\n                    type: 'bar'\n                },\n                \n            ]\n        };\n\n        // Chart config\n        const config = {\n            type: 'line',\n            data: data,\n            options: {\n                plugins: {\n                    title: {\n                        display: false,\n                    }\n                },\n                responsive: true,\n                interaction: {\n                    intersect: false,\n                },\n                scales: {\n                    y: {\n                        stacked: true\n                    }\n                }\n            },\n            defaults: {\n                font: {\n                    family: 'inherit',\n                }\n            }\n        };\n\n        // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n        var myChart = new Chart(ctx, config);\n    }\n\n    var example5 = function () {\n        // Define chart element\n        var ctx = document.getElementById('kt_chartjs_5');\n\n        // Define colors\n        var infoColor = KTUtil.getCssVariableValue('--kt-info');\n        var infoLightColor = KTUtil.getCssVariableValue('--kt-info-light');\n        var warningColor = KTUtil.getCssVariableValue('--kt-warning');\n        var warningLightColor = KTUtil.getCssVariableValue('--kt-warning-light');\n        var primaryColor = KTUtil.getCssVariableValue('--kt-primary');\n        var primaryLightColor = KTUtil.getCssVariableValue('--kt-primary-light');\n\n        // Define fonts\n        var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n        // Chart labels\n        const labels = ['January', 'February', 'March', 'April', 'May', 'June'];\n\n        // Chart data\n        const data = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Dataset 1',\n                    data: generateRandomData(20, 80, 6),\n                    borderColor: infoColor,\n                    backgroundColor: infoLightColor,\n                },\n                {\n                    label: 'Dataset 2',\n                    data: generateRandomData(10, 60, 6),\n                    backgroundColor: warningLightColor,\n                    borderColor: warningColor,\n                },\n                {\n                    label: 'Dataset 3',\n                    data: generateRandomData(0, 80, 6),\n                    backgroundColor: primaryLightColor,\n                    borderColor: primaryColor,\n                },                \n            ]\n        };\n\n        // Chart config\n        const config = {\n            type: 'radar',\n            data: data,\n            options: {\n                plugins: {\n                    title: {\n                        display: false,\n                    }\n                },\n                responsive: true,\n            }\n        };\n\n        // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n        var myChart = new Chart(ctx, config);\n    }\n\n    return {\n        // Public Functions\n        init: function () {\n            // Global font settings: https://www.chartjs.org/docs/latest/general/fonts.html\n            Chart.defaults.font.size = 13;\n            Chart.defaults.font.family = KTUtil.getCssVariableValue('--bs-font-sans-serif');\n\n            example1();\n            example2();\n            example3();\n            example4();\n            example5();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTGeneralChartJS.init();\n});\n"],"names":[],"sourceRoot":""}