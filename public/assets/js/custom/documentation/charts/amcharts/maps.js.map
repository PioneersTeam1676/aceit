{"version":3,"file":"js/custom/documentation/charts/amcharts/maps.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,+BAA+B,KAAK;AACpC;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,+BAA+B,KAAK;AACpC;AACA;AACA,aAAa;;AAEb,kDAAkD;;AAElD;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA,oEAAoE;;AAEpE;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,SAAS,GAAG;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,kFAAkF;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,kDAAkD,8BAA8B;;AAEhF;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb,kCAAkC,qCAAqC;AACvE,oCAAoC,wCAAwC;AAC5E,+BAA+B,oCAAoC;AACnE,mCAAmC,8BAA8B;;AAEjE;AACA;AACA,aAAa;;AAEb,kFAAkF;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,0DAA0D;AAC1D;AACA,8CAA8C,mBAAmB;AACjE,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA,SAAS,GAAG;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;AAGb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,+BAA+B,KAAK;AACpC;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;;AAGb;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;;;AAGb;AACA;AACA,uFAAuF;AACvF,uDAAuD,+EAA+E;;;AAGtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;AAGb;AACA;;AAEA,SAAS,GAAG;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,oDAAoD;;AAEpD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,yCAAyC,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,yDAAyD,kBAAkB;;AAE3E;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA,yCAAyC,kCAAkC,GAAG,GAAG;AACjF,yDAAyD,kBAAkB;;AAE3E;AACA,kFAAkF;AAClF;AACA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA,oEAAoE;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,SAAS,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC,E","sources":["webpack://team1676-apps/./frontend/js/custom/documentation/charts/amcharts/maps.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTGeneralAmChartsMaps = function () {\n    // Shared variables\n    var chart;\n    const bodyColor = getComputedStyle(document.documentElement).getPropertyValue('--kt-body-color');\n    const bgColor = getComputedStyle(document.documentElement).getPropertyValue('--kt-body-bg');\n\n    // Private functions\n    var demo1 = function () {\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n        am5.ready(function () {\n            // Create root element\n            // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n            var root = am5.Root.new(\"kt_amcharts_1\");\n\n            // Set themes\n            // https://www.amcharts.com/docs/v5/concepts/themes/\n            root.setThemes([\n                am5themes_Animated.new(root)\n            ]);\n\n            // Create the map chart\n            // https://www.amcharts.com/docs/v5/charts/map-chart/\n            var chart = root.container.children.push(am5map.MapChart.new(root, {\n                panX: \"translateX\",\n                panY: \"translateY\",\n                projection: am5map.geoMercator()\n            }));\n\n            // Create main polygon series for countries\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {\n                geoJSON: am5geodata_worldLow,\n                exclude: [\"AQ\"]\n            }));\n\n            polygonSeries.mapPolygons.template.setAll({\n                tooltipText: \"{name}\",\n                toggleKey: \"active\",\n                interactive: true\n            });\n\n            polygonSeries.mapPolygons.template.states.create(\"hover\", {\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\n            });\n\n            polygonSeries.mapPolygons.template.states.create(\"active\", {\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\n            });\n\n            // US Series\n            // Create main polygon series for countries\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n            var polygonSeriesUS = chart.series.push(am5map.MapPolygonSeries.new(root, {\n                geoJSON: am5geodata_usaLow\n            }));\n\n            polygonSeriesUS.mapPolygons.template.setAll({\n                tooltipText: \"{name}\",\n                toggleKey: \"active\",\n                interactive: true\n            });\n\n            var colors = am5.ColorSet.new(root, {});\n\n            polygonSeriesUS.mapPolygons.template.set(\"fill\", colors.getIndex(3));\n\n            polygonSeriesUS.mapPolygons.template.states.create(\"hover\", {\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\n            });\n\n            polygonSeriesUS.mapPolygons.template.states.create(\"active\", {\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\n            });\n\n            // Add zoom control\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\n            chart.set(\"zoomControl\", am5map.ZoomControl.new(root, {}));\n\n            // Set clicking on \"water\" to zoom out\n            chart.chartContainer.get(\"background\").events.on(\"click\", function () {\n                chart.goHome();\n            })\n\n            // Make stuff animate on load\n            chart.appear(1000, 100);\n        }); // end am5.ready()\n    }\n\n    var demo2 = function () {\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n        am5.ready(function () {\n\n            // Create root element\n            // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n            var root = am5.Root.new(\"kt_amcharts_2\");\n\n            // Set themes\n            // https://www.amcharts.com/docs/v5/concepts/themes/\n            root.setThemes([\n                am5themes_Animated.new(root)\n            ]);\n\n            // Create the map chart\n            // https://www.amcharts.com/docs/v5/charts/map-chart/\n            var chart = root.container.children.push(am5map.MapChart.new(root, {\n                panX: \"rotateX\",\n                panY: \"translateY\",\n                projection: am5map.geoMercator(),\n                homeGeoPoint: { latitude: 2, longitude: 2 }\n            }));\n\n            var cont = chart.children.push(am5.Container.new(root, {\n                layout: root.horizontalLayout,\n                x: 20,\n                y: 40\n            }));\n\n            // Add labels and controls\n            cont.children.push(am5.Label.new(root, {\n                centerY: am5.p50,\n                text: \"Map\",\n                fill: bodyColor\n            }));\n\n            var switchButton = cont.children.push(am5.Button.new(root, {\n                themeTags: [\"switch\"],\n                centerY: am5.p50,\n                icon: am5.Circle.new(root, {\n                    themeTags: [\"icon\"]\n                })\n            }));\n\n            switchButton.on(\"active\", function () {\n                if (!switchButton.get(\"active\")) {\n                    chart.set(\"projection\", am5map.geoMercator());\n                    chart.set(\"panY\", \"translateY\");\n                    chart.set(\"rotationY\", 0);\n                    backgroundSeries.mapPolygons.template.set(\"fillOpacity\", 0);\n                } else {\n                    chart.set(\"projection\", am5map.geoOrthographic());\n                    chart.set(\"panY\", \"rotateY\")\n\n                    backgroundSeries.mapPolygons.template.set(\"fillOpacity\", 0.1);\n                }\n            });\n\n            cont.children.push(\n                am5.Label.new(root, {\n                    centerY: am5.p50,\n                    text: \"Globe\",\n                    fill: bodyColor\n                })\n            );\n\n            // Create series for background fill\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\n            var backgroundSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {}));\n            backgroundSeries.mapPolygons.template.setAll({\n                fill: root.interfaceColors.get(\"alternativeBackground\"),\n                fillOpacity: 0,\n                strokeOpacity: 0\n            });\n\n            // Add background polygon\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\n            backgroundSeries.data.push({\n                geometry: am5map.getGeoRectangle(90, 180, -90, -180)\n            });\n\n            // Create main polygon series for countries\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {\n                geoJSON: am5geodata_worldLow\n            }));\n\n            // Create line series for trajectory lines\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-line-series/\n            var lineSeries = chart.series.push(am5map.MapLineSeries.new(root, {}));\n            lineSeries.mapLines.template.setAll({\n                stroke: bodyColor,\n                strokeOpacity: 0.3\n            });\n\n            // Create point series for markers\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/\n            var pointSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\n\n            pointSeries.bullets.push(function () {\n                var circle = am5.Circle.new(root, {\n                    radius: 7,\n                    tooltipText: \"Drag me!\",\n                    cursorOverStyle: \"pointer\",\n                    tooltipY: 0,\n                    fill: am5.color(0xffba00),\n                    stroke: bgColor,\n                    strokeWidth: 2,\n                    draggable: true\n                });\n\n                circle.events.on(\"dragged\", function (event) {\n                    var dataItem = event.target.dataItem;\n                    var projection = chart.get(\"projection\");\n                    var geoPoint = chart.invert({ x: circle.x(), y: circle.y() });\n\n                    dataItem.setAll({\n                        longitude: geoPoint.longitude,\n                        latitude: geoPoint.latitude\n                    });\n                });\n\n                return am5.Bullet.new(root, {\n                    sprite: circle\n                });\n            });\n\n            var paris = addCity({ latitude: 48.8567, longitude: 2.351 }, \"Paris\");\n            var toronto = addCity({ latitude: 43.8163, longitude: -79.4287 }, \"Toronto\");\n            var la = addCity({ latitude: 34.3, longitude: -118.15 }, \"Los Angeles\");\n            var havana = addCity({ latitude: 23, longitude: -82 }, \"Havana\");\n\n            var lineDataItem = lineSeries.pushDataItem({\n                pointsToConnect: [paris, toronto, la, havana]\n            });\n\n            var planeSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\n\n            var plane = am5.Graphics.new(root, {\n                svgPath:\n                    \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\",\n                scale: 0.06,\n                centerY: am5.p50,\n                centerX: am5.p50,\n                fill: bgColor\n            });\n\n            planeSeries.bullets.push(function () {\n                var container = am5.Container.new(root, {});\n                container.children.push(plane);\n                return am5.Bullet.new(root, { sprite: container });\n            });\n\n            var planeDataItem = planeSeries.pushDataItem({\n                lineDataItem: lineDataItem,\n                positionOnLine: 0,\n                autoRotate: true\n            });\n\n            planeDataItem.animate({\n                key: \"positionOnLine\",\n                to: 1,\n                duration: 10000,\n                loops: Infinity,\n                easing: am5.ease.yoyo(am5.ease.linear)\n            });\n\n            planeDataItem.on(\"positionOnLine\", function (value) {\n                if (value >= 0.99) {\n                    plane.set(\"rotation\", 180);\n                } else if (value <= 0.01) {\n                    plane.set(\"rotation\", 0);\n                }\n            });\n\n            function addCity(coords, title) {\n                return pointSeries.pushDataItem({\n                    latitude: coords.latitude,\n                    longitude: coords.longitude\n                });\n            }\n\n            // Make stuff animate on load\n            chart.appear(1000, 100);\n\n        }); // end am5.ready()\n    }\n\n    var demo3 = function () {\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n        am5.ready(function () {\n\n            // Create root element\n            // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n            var root = am5.Root.new(\"kt_amcharts_3\");\n\n\n            // Set themes\n            // https://www.amcharts.com/docs/v5/concepts/themes/\n            root.setThemes([\n                am5themes_Animated.new(root)\n            ]);\n\n\n            // Create the map chart\n            // https://www.amcharts.com/docs/v5/charts/map-chart/\n            var chart = root.container.children.push(am5map.MapChart.new(root, {\n                panX: \"rotateX\",\n                panY: \"rotateY\",\n                projection: am5map.geoOrthographic(),\n                paddingBottom: 20,\n                paddingTop: 20,\n                paddingLeft: 20,\n                paddingRight: 20\n            }));\n\n\n            // Create main polygon series for countries\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {\n                geoJSON: am5geodata_worldLow\n            }));\n\n            polygonSeries.mapPolygons.template.setAll({\n                tooltipText: \"{name}\",\n                toggleKey: \"active\",\n                interactive: true\n            });\n\n            polygonSeries.mapPolygons.template.states.create(\"hover\", {\n                fill: root.interfaceColors.get(\"primaryButtonHover\")\n            });\n\n\n            // Create series for background fill\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon\n            var backgroundSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {}));\n            backgroundSeries.mapPolygons.template.setAll({\n                fill: root.interfaceColors.get(\"alternativeBackground\"),\n                fillOpacity: 0.1,\n                strokeOpacity: 0\n            });\n            backgroundSeries.data.push({\n                geometry: am5map.getGeoRectangle(90, 180, -90, -180)\n            });\n\n\n            // Create graticule series\n            // https://www.amcharts.com/docs/v5/charts/map-chart/graticule-series/\n            var graticuleSeries = chart.series.push(am5map.GraticuleSeries.new(root, {}));\n            graticuleSeries.mapLines.template.setAll({ strokeOpacity: 0.1, stroke: root.interfaceColors.get(\"alternativeBackground\") })\n\n\n            // Rotate animation\n            chart.animate({\n                key: \"rotationX\",\n                from: 0,\n                to: 360,\n                duration: 30000,\n                loops: Infinity\n            });\n\n\n            // Make stuff animate on load\n            chart.appear(1000, 100);\n\n        }); // end am5.ready()\n    }\n\n    var demo4 = function () {\n        // Init AmChart -- for more info, please visit the official documentiation: https://www.amcharts.com/docs/v5/getting-started/\n        am5.ready(function () {\n\n            // Create root element\n            // https://www.amcharts.com/docs/v5/getting-started/#Root_element\n            var root = am5.Root.new(\"kt_amcharts_4\");\n\n            // Set themes\n            // https://www.amcharts.com/docs/v5/concepts/themes/\n            root.setThemes([\n                am5themes_Animated.new(root)\n            ]);\n\n            // Create the map chart\n            // https://www.amcharts.com/docs/v5/charts/map-chart/\n            var chart = root.container.children.push(\n                am5map.MapChart.new(root, {\n                    panX: \"translateX\",\n                    panY: \"translateY\",\n                    projection: am5map.geoMercator()\n                })\n            );\n\n            var colorSet = am5.ColorSet.new(root, {});\n\n            // Create main polygon series for time zone areas\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n            var areaSeries = chart.series.push(\n                am5map.MapPolygonSeries.new(root, {\n                    geoJSON: am5geodata_worldTimeZoneAreasLow\n                })\n            );\n\n            var areaPolygonTemplate = areaSeries.mapPolygons.template;\n            areaPolygonTemplate.setAll({ fillOpacity: 0.6 });\n            areaPolygonTemplate.adapters.add(\"fill\", function (fill, target) {\n                return am5.Color.saturate(\n                    colorSet.getIndex(areaSeries.mapPolygons.indexOf(target)),\n                    0.5\n                );\n            });\n\n            areaPolygonTemplate.states.create(\"hover\", { fillOpacity: 0.8 });\n\n            // Create main polygon series for time zones\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/\n            var zoneSeries = chart.series.push(\n                am5map.MapPolygonSeries.new(root, {\n                    geoJSON: am5geodata_worldTimeZonesLow\n                })\n            );\n\n            zoneSeries.mapPolygons.template.setAll({\n                fill: am5.color(0x000000),\n                fillOpacity: 0.08\n            });\n\n            var zonePolygonTemplate = zoneSeries.mapPolygons.template;\n            zonePolygonTemplate.setAll({ interactive: true, tooltipText: \"{id}\" });\n            zonePolygonTemplate.states.create(\"hover\", { fillOpacity: 0.3 });\n\n            // labels\n            var labelSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\n            labelSeries.bullets.push(() => {\n                return am5.Bullet.new(root, {\n                    sprite: am5.Label.new(root, {\n                        text: \"{id}\",\n                        populateText: true,\n                        centerX: am5.p50,\n                        centerY: am5.p50,\n                        fontSize: \"0.7em\",\n                        fill: bodyColor\n                    })\n                });\n            });\n\n            // create labels for each zone\n            zoneSeries.events.on(\"datavalidated\", () => {\n                am5.array.each(zoneSeries.dataItems, (dataItem) => {\n                    var centroid = dataItem.get(\"mapPolygon\").visualCentroid();\n                    labelSeries.pushDataItem({\n                        id: dataItem.get(\"id\"),\n                        geometry: {\n                            type: \"Point\",\n                            coordinates: [centroid.longitude, centroid.latitude]\n                        }\n                    });\n                });\n            });\n\n            // Add zoom control\n            // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control\n            chart.set(\"zoomControl\", am5map.ZoomControl.new(root, {}));\n\n            // Add labels and controls\n            var cont = chart.children.push(\n                am5.Container.new(root, {\n                    layout: root.horizontalLayout,\n                    x: 20,\n                    y: 40\n                })\n            );\n\n            cont.children.push(\n                am5.Label.new(root, {\n                    centerY: am5.p50,\n                    text: \"Map\",\n                    fill: bodyColor\n                })\n            );\n\n            var switchButton = cont.children.push(\n                am5.Button.new(root, {\n                    themeTags: [\"switch\"],\n                    centerY: am5.p50,\n                    icon: am5.Circle.new(root, {\n                        themeTags: [\"icon\"]\n                    })\n                })\n            );\n\n            switchButton.on(\"active\", function () {\n                if (!switchButton.get(\"active\")) {\n                    chart.set(\"projection\", am5map.geoMercator());\n                    chart.set(\"panX\", \"translateX\");\n                    chart.set(\"panY\", \"translateY\");\n                } else {\n                    chart.set(\"projection\", am5map.geoOrthographic());\n                    chart.set(\"panX\", \"rotateX\");\n                    chart.set(\"panY\", \"rotateY\");\n                }\n            });\n\n            cont.children.push(\n                am5.Label.new(root, {\n                    centerY: am5.p50,\n                    text: \"Globe\",\n                    fill: bodyColor\n                })\n            );\n            // Make stuff animate on load\n            chart.appear(1000, 100);\n\n        }); // end am5.ready()\n    }\n\n    return {\n        // Public Functions\n        init: function () {\n            demo1();\n            demo2();\n            demo3();\n            demo4();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTGeneralAmChartsMaps.init();\n});"],"names":[],"sourceRoot":""}